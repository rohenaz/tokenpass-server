import{BAP as e}from"bitcoin-bap";import t from"bitcore-mnemonic";import r from"body-parser";import{Hash as o,ExtendedPrivateKey as s}from"bsv-wasm";import a from"connect-timeout";import n from"cors";import i,{randomUUID as c}from"crypto";import l from"express";import u from"fs";import d from"nedb";import h,{dirname as p}from"path";import{fileURLToPath as m}from"url";import g from"bitcore-lib";import{MnemonicEN as f}from"@bsvwasm/mnemonic";import y from"buffer";function b(){return b=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},b.apply(this,arguments)}class w{constructor(e){this.db=new e.Datastore({filename:e.db+"/keys.db",autoload:!0}),this.wallet=e.wallet,this.config=e}setSeed(e){this.seed=e}getSeed(){return this.seed}sign(e){return this.wallet.sign(e.message,e.key,e.encoding)}encrypt(e){return this.wallet.encrypt(e.message,e.key)}async findOrCreate(e){let t=await this.findOne(e);if(!t){let r=await this.count({});if(!this.seed)return console.log("Please go to http://localhost:21000 and create a wallet"),null;t=await this.wallet.create(this.seed,r,e),t=await this.insert(t)}return t}findOne(e){return new Promise((t,r)=>{this.db.findOne(e,(e,r)=>{t(r?this.transform(r):null)})})}find(e){return new Promise((t,r)=>{this.db.find(e,(e,r)=>{t(r.map(e=>this.transform(e)))})})}count(e){return new Promise((t,r)=>{this.db.count(e,(e,r)=>{t(r)})})}insert(e){return new Promise((t,r)=>{this.db.insert(e,(r,o)=>{t(this.transform(e))})})}transform(e){let t=this.wallet.derive(this.seed,e.path);return e.priv=t.privateKey.toString(),e.pub=t.publicKey.toString(),e.address=t.publicKey.toAddress().toString(),e}all(){return new Promise((e,t)=>{this.db.find({},(t,r)=>{e(r.map(e=>this.transform(e)))})})}}function v(e,t,r){const o=i.randomBytes(16);r||(r=i.createHash("sha256").update(t).digest());let s=i.createCipheriv("aes-256-cbc",r,o),a=s.update(e);return a=Buffer.concat([a,s.final()]),{iv:o.toString("hex"),encryptedData:a.toString("hex")}}class k{constructor(e){this.db=new e.Datastore({filename:e.db+"/seed.db",autoload:!0}),this.wallet=e.wallet}get(e){return new Promise((t,r)=>{this.db.findOne({},(r,o)=>{if(o)try{let r=function(e,t,r){const o=Buffer.from(e.iv,"hex");r||(r=i.createHash("sha256").update(t).digest());let s=Buffer.from(e.encryptedData,"hex"),a=i.createDecipheriv("aes-256-cbc",r,o),n=a.update(s);return n=Buffer.concat([n,a.final()]),n.toString()}(o.hex,e),s=this.wallet.seed(r);t(s)}catch(e){t(null)}else t(null)})})}importKey(e,t){return new Promise((r,o)=>{try{let o=this.wallet.seed(e);this.db.insert({hex:v(o.hex,t)},(e,t)=>{r(o)})}catch(e){o(e)}})}async exportKey(e){return(await this.get(e)).hex}count(){return new Promise((e,t)=>{this.db.count({},(t,r)=>{e(r)})})}create(e){return new Promise((t,r)=>{let o=this.wallet.seed(void 0,e);this.db.insert({hex:v(o.hex,e)},(e,r)=>{t(o)})})}}class S{constructor(e){this.db=new e.Datastore({filename:e.db+"/state.db",autoload:!0})}setState(e){this.state=e}getState(){return this.state}async findOrCreate(e){let t=await this.findOne({host:e.host});return t||(t=await this.insert(e)),t}findOne(e){return new Promise((t,r)=>{this.db.findOne(e,(e,r)=>{r?(delete r._id,t(r)):t(null)})})}find(e){return new Promise((t,r)=>{this.db.find(e,(e,r)=>{t(r)})})}delete(e){return new Promise((t,r)=>{this.db.remove(e,(e,r)=>{t(r)})})}count(e){return new Promise((t,r)=>{this.db.count(e,(e,r)=>{t(r)})})}insert(e){return new Promise((t,r)=>{this.db.insert(e,(r,o)=>{this.setState(e),t(e)})})}update(e){return new Promise((t,r)=>{this.db.update({host:e.host},{$set:e},{upsert:!0,returnUpdatedDocs:!0},(e,r,o)=>{console.log("UPDATED",{err:e,accessToken:o.accessToken}),this.setState(o),t(o)})})}all(){return new Promise((e,t)=>{this.db.find({},(t,r)=>{e(r)})})}}var T="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function O(e){var t={exports:{}};return e(t,t.exports),t.exports}var x=O(function(e,t){var r=y.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,o){return r(e,t,o)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=y:(o(y,t),t.Buffer=s),s.prototype=Object.create(r.prototype),o(r,s),s.from=function(e,t,o){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,o)},s.alloc=function(e,t,o){if("number"!=typeof e)throw new TypeError("Argument must be a number");var s=r(e);return void 0!==t?"string"==typeof o?s.fill(t,o):s.fill(t):s.fill(0),s},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return y.SlowBuffer(e)}}),P=O(function(e){var t=65536,r=x.Buffer,o=T.crypto||T.msCrypto;e.exports=o&&o.getRandomValues?function(e,s){if(e>4294967295)throw new RangeError("requested too many random bytes");var a=r.allocUnsafe(e);if(e>0)if(e>t)for(var n=0;n<e;n+=t)o.getRandomValues(a.slice(n,n+t));else o.getRandomValues(a);return"function"==typeof s?process.nextTick(function(){s(null,a)}):a}:function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}});const j=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"];function A(e){return e.toString("hex").match(/.{2}/g).map(e=>parseInt(e,16).toString(2).padStart(8,"0")).join("")}var E=g.deps._,K=g.PrivateKey,_=g.PublicKey,N=g.Address,R=g.encoding.BufferWriter,z=g.crypto.ECDSA,q=g.crypto.Signature,U=g.crypto.Hash.sha256sha256,B=g.util.js,H=g.util.preconditions,$=function e(t,r="utf8"){return this instanceof e?(H.checkArgument(E.isString(t),"First argument should be a string. You can specify the encoding as the second parameter"),H.checkArgument(["ascii","utf8","utf16le","ucs2","base64","latin1","binary","hex"].includes(r),"Second argument should be a valid BufferEncoding: 'utf8', 'hex', or 'base64', etc"),this.message=t,this.encoding=r,this):new e(t,r)};$.MAGIC_BYTES=Buffer.from("Bitcoin Signed Message:\n"),$.prototype.magicHash=function(){var e=R.varintBufNum($.MAGIC_BYTES.length),t=Buffer.from(this.message,this.encoding),r=R.varintBufNum(t.length),o=Buffer.concat([e,$.MAGIC_BYTES,r,t]);return U(o)},$.prototype._sign=function(e){H.checkArgument(e instanceof K,"First argument should be an instance of PrivateKey");var t=this.magicHash(),r=new z;return r.hashbuf=t,r.privkey=e,r.pubkey=e.toPublicKey(),r.signRandomK(),r.calci(),r.sig},$.prototype.sign=function(e){let t=e.toWIF();return e=K.fromWIF(t),this._sign(e).toCompact().toString("base64")},$.prototype._verify=function(e,t){H.checkArgument(e instanceof _,"First argument should be an instance of PublicKey"),H.checkArgument(t instanceof q,"Second argument should be an instance of Signature");var r=this.magicHash(),o=z.verify(r,t,e);return o||(this.error="The signature was invalid"),o},$.prototype.verify=function(e,t){H.checkArgument(e),H.checkArgument(t&&E.isString(t)),E.isString(e)&&(e=N.fromString(e));var r=q.fromCompact(Buffer.from(t,"base64")),o=new z;o.hashbuf=this.magicHash(),o.sig=r;var s=o.toPublicKey(),a=N.fromPublicKey(s,e.network);return e.toString()!==a.toString()?(this.error="The signature did not match the message digest",!1):this._verify(s,r)},$.fromString=function(e){return new $(e)},$.fromJSON=function(e){return B.isValidJSON(e)&&(e=JSON.parse(e)),new $(e.message)},$.prototype.toObject=function(){return{message:this.message,encoding:this.encoding}},$.prototype.toJSON=function(){return JSON.stringify(this.toObject())},$.prototype.toString=function(){return this.message},$.prototype.inspect=function(){return"<Message: "+this.toString()+">"},delete global._bitcore;const C=(e,t,r)=>{const o=g.PrivateKey.fromWIF(t.priv),s=$(e,r);return{address:t.address,message:e,sig:s.sign(o),ts:Date.now()}};var D={__proto__:null,sign:C,encrypt:(e,t)=>{const r=v(e,null,g.PrivateKey.fromWIF(t.priv).toBuffer());return{address:t.address,data:r,ts:Date.now()}},create:async(e,t,r)=>{const o=`m/44'/0'/${t}'/2/0`,s=e.key.deriveChild(o),a=s.privateKey.toAddress().toString();return{path:o,pub:s.publicKey.toString(),address:a,host:r.host}},seed:(e,t)=>{let r;if(e)r=Buffer.from(e,"hex");else{if(!t)throw new Error("passphrase required creting initial seed");let e=function(e){const t=A(e),r=o.sha_256(e).to_bytes(),s=t+A(Buffer.from(r)).substring(0,8*e.length/32),a=[];for(let e=0;e<s.length;e+=11){const t=parseInt(s.slice(e,e+11),2);a.push(j[t])}return new f(a.join(" "))}(P(16));e.setPassphrase(t),r=Buffer.from(e.toBytes())}try{let e=g.HDPrivateKey.fromSeed(r);return{hex:r.toString("hex"),key:e}}catch(e){throw e}},derive:(e,t)=>e.key.deriveChild(t),verify:(e,t,r,o)=>$(e,o).verify(t,r)};const L=p(m(import.meta.url)),I=l(),F=[`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}`],M=process.env.TOKENPASS_ORIGIN_WHITELIST;M&&F.push(...M.split(","));const G=e=>e.origin?new URL(e.origin).host:null,W=o=>{const i=o.db;u.existsSync(i)||u.mkdirSync(i,{recursive:!0});const p=new k({db:i,wallet:D,Datastore:d}),m=new w({db:i,wallet:D,Datastore:d}),g=new S({db:i,Datastore:d});I.set("views",h.join(L,"views")),I.set("view engine","ejs"),I.use(a("20s")),I.use(r.json({limit:"50mb"})),I.use(r.raw({type:"application/octet-stream",limit:"50mb"})),I.use(r.urlencoded({limit:"50mb",extended:!0})),I.use(l.static(h.join(L,"public"))),I.options("*",n()),I.use(l.urlencoded({extended:!1})),I.post("/sign",n(),async(e,t)=>{console.log("SIGN ATTEMPTED FROM",e.headers.origin,{message:e.body.message,authToken:e.headers.authorization});let r=e.body.message,o=e.body.encoding||"utf8";if(m.getSeed()){const s=e.headers.authorization;if(void 0===s|null===s)return void t.status(401).json({error:"Please provide an access token in the Authorization header.",code:2,success:!1,errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`});const a=await g.findOne({accessToken:s});if(null==a||!a.accessToken||a.accessToken!==s)return void t.status(401).json({error:"Invalid access token.",errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`,code:3,success:!1});let n=s?a.host:G(e.headers);n||(n=process.env.TOKENPASS_HOST||"localhost",console.log("no origin, using",n));const i=a.expireTime&&a.expireTime<Date.now();if(console.log("SIGN:",{expireTime:a.expireTime,now:Date.now(),host:n}),i)return void t.status(401).json({error:"Access token has expired.",errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`,code:5});let c=await m.findOrCreate({host:n});if(c){let e=await m.sign({message:r,key:c,encoding:o,ts:Date.now()});return void t.status(200).json(e)}t.status(417).json({error:"please create a wallet.",success:!1})}else t.status(401).json({errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`,error:"Check that TokenPass is running and you're signed in.",code:1})}),I.post("/encrypt",n(),async(e,t)=>{let r=e.body.message;if(m.getSeed()){const o=e.headers.authorization;if(void 0===o|null===o)return void t.status(401).json({error:"Please provide an access token in the Authorization header.",code:2,success:!1,errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`});G(e.headers);const s=await g.findOne({accessToken:o});if(!s)return void t.status(401).json({error:"Invalid access token.",errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`,code:3,success:!1});const a=await m.findOrCreate({host:s.host});if(!a)return void t.status(417).json({error:"please create a wallet."});const{address:n,data:i,sig:c,ts:l}=m.encrypt({message:r,key:a});console.log({address:n,data:i,sig:c,ts:l}),t.status(200).json({data:i,address:n,sig:c,ts:l})}else t.status(401).json({errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`,error:"Check that TokenPass is running and you're signed in.",code:1})}),I.post("/register",async(t,r)=>{let o=await p.create(t.body.password);const a=s.from_seed(Buffer.from(o.hex,"hex")),n=new e(a.to_string()).newId();m.setSeed(o);const i=await g.findOrCreate({host:process.env.TOKENPASS_HOST||"localhost"});i.icon||(i.icon="/auth/icon"),await g.update(i);const c=await g.findOrCreate({host:"global"});n.setAttribute("displayName",t.body.displayName),n.setAttribute("paymail",t.body.paymail),n.setAttribute("logo",t.body.logo),c=b({},c,Object.keys(n.identityAttributes).reduce((e,t)=>(e[t]=n.identityAttributes[t].value,e),{}),{bapID:n.identityKey}),await g.update(c),r.json({})}),I.post("/import",n(),async(e,t)=>{try{let r=await p.importKey(e.body.hex,e.body.password);m.setSeed(r),t.json({})}catch(e){t.json({error:"invalid seed",success:!1})}}),I.post("/export",async(r,o)=>{try{let a=await p.exportKey(r.body.password);const n=s.from_seed(Buffer.from(a,"hex")),i=(new e(n.to_string()),t.fromSeed(Buffer.from(a,"hex"),t.Words.ENGLISH));i?o.json({seed:a,mnemonic:i.phrase}):o.status(401).json({error:"invalid",success:!1,errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`})}catch(e){console.error(e),o.status(500).json({error:"unknown error",success:!1})}}),I.post("/state",n(),async(e,t)=>{let r=new URL(e.headers.origin).host;await g.findOne({host:r})?"clear"===e.query.mode?(await g.delete({host:r}),await g.update(b({},e.body,{host:r}))):g.update(b({},e.body,{host:r})):g.insert(b({},e.body,{host:r})),t.json({success:!0})}),I.post("/profile",n(),async(e,t)=>{if(m.getSeed()){let r="global";try{const o=await g.findOne({host:r});let s=b({},e.body,{host:r});o?("clear"===e.query.mode&&await g.delete({host:r}),g.update(s)):g.insert(s),t.json({success:!0})}catch(e){console.error(e),t.status(500).json({success:!1,error:e.toString()})}}else t.status(401).json({error:"please check that TokenPass is running and you're signed in. check TokenPass dashboard at http://localhost:21000",code:1,errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}`})}),I.delete("/state",n(),async(e,t)=>{let r=new URL(e.headers.origin).host;g.delete(b({},e.body,{host:r})),t.json({success:!0})}),I.get("/profile",n(),async(e,t)=>{let r=await g.findOne({host:"global"});t.json(r)}),I.get("/state",n(),async(e,t)=>{let r=new URL(e.headers.origin).host,o=await g.findOne({host:r});t.json(o)}),I.post("/login",async(e,t)=>{try{let r=await p.get(e.body.password);r?(m.setSeed(r),t.json({success:!0})):t.json({error:"invalid",success:!1})}catch(e){}}),I.post("/logout",n(),(e,t)=>{m.setSeed(null),t.json({success:!0})}),I.post("/fund",n(),async(e,t)=>{if(m.getSeed()){var r;const o=`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/fund`;let s=e.headers.origin,a=s?new URL(s).host:"localhost";const n=await g.findOne({host:a});if(null==(r=n.scopes)||!r.includes("fund"))return void t.status(403).json({error:"Insufficient permission",code:7});const i=n.accessToken;let c=e.body.rawtx;try{const e=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({rawtx:c,broadcast:!0,sigma:!0,host:a,authToken:i})}),r=await e.json();t.json(r)}catch(e){console.error(e),t.status(500).json({success:!1,error:e.toString()})}}else t.status(401).json({error:"please check that TokenPass is running and you're signed in. check TokenPass dashboard at http://localhost:21000",code:1,errorURL:`http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}/auth`})}),I.post("/auth",n(),async(e,t)=>{console.log("AUTH ATTEMPTED FROM",e.headers.origin,{host:e.body.host});const r=e.body.password;try{let s=await p.get(r);if(s){var o;if(m.setSeed(s),e.headers.origin&&!F.includes(e.headers.origin))return void t.status(403).json({error:"The origin is not authorized",code:6});const r=e.body.host;console.log({hosts:r,origin:e.headers.origin});const a=(e=>{switch(e){case"forever":return 0;case"once":return 1e4;case"1h":return 36e5;case"1d":return 864e5;case"1w":return 6048e5;case"1m":return 2592e6;default:return"once"}})(e.body.expire),n=c(),i={host:r,accessToken:n,scopes:(null==(o=e.body.scopes)?void 0:o.split(","))||[],icon:e.body.icon,expireTime:Date.now()+a};await g.update(i),t.json({success:!0,accessToken:n,expireTime:a,host:r})}else t.json({error:"invalid",success:!1})}catch(e){t.status(500).json({success:!1,error:e.toString()})}}),I.get("/prove",async(e,t)=>{new URL(e.headers.origin);let r=e.query.txid,o=e.query.message,s=await(void 0)(r);if(!s)return void t.status(404).json({error:"txid not found",code:4});const{address:a,message:n,sig:i,ts:c}=C(o,s);return t.json({message:n,key:s,address:a,sig:i,ts:c})}),I.get("/auth",async(e,t)=>{var r;const o=new URL(e.query.returnURL).host,s=G(e.headers),a=s||process.env.TOKENPASS_HOST||"localhost";if(s&&a!==o)return void t.status(403).json({error:"The origin is not authorized "+a+" "+o,code:6});const n=e.query.returnURL,i=e.query.icon,c=(null==(r=e.query.scopes)?void 0:r.split(","))||[];console.log("AUTH GET:",{returnURL:n,icon:i}),t.render("auth",{returnURL:n,icon:i,scopes:c,host:a||"lostlhost"})}),I.get("/auth/icon",n(),async(e,t)=>{if(e.headers.origin&&!F.includes(e.headers.origin))return void t.status(403).json({error:"The origin is not authorized",code:6});const r=async e=>(await import("minidenticons")).minidenticon(e);if(t.set("Content-Type","image/svg+xml"),t.set("Cache-Control","max-age=31536000"),m.getSeed()){let e=await m.findOrCreate({host:"localhost"});t.send(await r(e.pub))}else t.send(await r("Anon"))}),I.get("/",async(e,t)=>{if(m.getSeed()){let e=await m.all()||[],r=await g.all()||[];console.log(r),t.render("home",{keys:e,states:r,seed:!0})}else if(await p.count()){const r=G(e.headers);t.render("login",{host:r})}else t.render("home",{seed:!1})}),I.listen(process.env.TOKENPASS_PORT||21e3,()=>{console.log(`TokenPass listening at http://${process.env.TOKENPASS_HOST||"localhost"}:${process.env.TOKENPASS_PORT||"21000"}`)})};export{W as init};
//# sourceMappingURL=index.modern.js.map
