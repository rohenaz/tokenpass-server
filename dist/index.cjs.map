{"version":3,"file":"index.cjs","sources":["../key.js","../crypt.js","../seed.js","../state.js","../wallet/bitcore-message.js","../wallet/index.js","../index.js"],"sourcesContent":["class Key {\n  constructor(config) {\n    const dbpath = config.db;\n    this.db = new config.Datastore({\n      filename: dbpath + \"/keys.db\",\n      autoload: true,\n    });\n    this.wallet = config.wallet;\n    this.config = config;\n  }\n  setSeed(s) {\n    this.seed = s;\n  }\n  getSeed() {\n    return this.seed;\n  }\n  sign(o) {\n    return this.wallet.sign(o.message, o.key, o.encoding);\n  }\n  encrypt(o) {\n    return this.wallet.encrypt(o.message, o.key);\n  }\n  async findOrCreate(o) {\n    let key = await this.findOne(o);\n    // create a key if it doesn't exist\n    if (!key) {\n      let count = await this.count({});\n      if (this.seed) {\n        key = await this.wallet.create(this.seed, count, o);\n        key = await this.insert(key);\n      } else {\n        console.log(\"Please go to http://localhost:21000 and create a wallet\");\n        return null;\n      }\n    }\n    return key;\n  }\n  findOne(o) {\n    return new Promise((resolve, reject) => {\n      this.db.findOne(o, (err, key) => {\n        if (key) {\n          resolve(this.transform(key));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n  find(o) {\n    return new Promise((resolve, reject) => {\n      this.db.find(o, (err, keys) => {\n        resolve(\n          keys.map((k) => {\n            return this.transform(k);\n          })\n        );\n      });\n    });\n  }\n  count(o) {\n    return new Promise((resolve, reject) => {\n      this.db.count(o, (err, count) => {\n        resolve(count);\n      });\n    });\n  }\n  insert(key) {\n    return new Promise((resolve, reject) => {\n      this.db.insert(key, (err, doc) => {\n        resolve(this.transform(key));\n      });\n    });\n  }\n  transform(key) {\n    let derived = this.wallet.derive(this.seed, key.path);\n    key.priv = derived.privateKey.toString();\n    key.pub = derived.publicKey.toString();\n    key.address = derived.publicKey.toAddress().toString();\n    return key;\n  }\n  all() {\n    return new Promise((resolve, reject) => {\n      this.db.find({}, (err, keys) => {\n        resolve(\n          keys.map((k) => {\n            return this.transform(k);\n          })\n        );\n      });\n    });\n  }\n}\nexport default Key;\n","import crypto from \"crypto\";\n\nconst algorithm = \"aes-256-cbc\";\n\nexport function encrypt(text, keystr, keyBuffer) {\n  const iv = crypto.randomBytes(16);\n  if (!keyBuffer)\n    keyBuffer = crypto.createHash(\"sha256\").update(keystr).digest();\n  let cipher = crypto.createCipheriv(\"aes-256-cbc\", keyBuffer, iv);\n  let encrypted = cipher.update(text);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\n}\n\nexport function decrypt(text, keystr, keyBuffer) {\n  const iv = Buffer.from(text.iv, \"hex\");\n  if (!keyBuffer)\n    keyBuffer = crypto.createHash(\"sha256\").update(keystr).digest();\n  let encryptedText = Buffer.from(text.encryptedData, \"hex\");\n  let decipher = crypto.createDecipheriv(\"aes-256-cbc\", keyBuffer, iv);\n  let decrypted = decipher.update(encryptedText);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\n","import { decrypt, encrypt } from \"./crypt.js\";\n\nclass Seed {\n  constructor(config) {\n    const dbpath = config.db;\n    this.db = new config.Datastore({\n      filename: dbpath + \"/seed.db\",\n      autoload: true,\n    });\n    this.wallet = config.wallet;\n  }\n  get(password) {\n    return new Promise((resolve, reject) => {\n      this.db.findOne({}, (err, r) => {\n        if (r) {\n          try {\n            let decrypted = decrypt(r.hex, password);\n            let s = this.wallet.seed(decrypted);\n            resolve(s);\n          } catch (e) {\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n  importKey(hex, password) {\n    return new Promise((resolve, reject) => {\n      try {\n        let s = this.wallet.seed(hex);\n        this.db.insert(\n          {\n            hex: encrypt(s.hex, password),\n          },\n          (err, res) => {\n            resolve(s);\n          }\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  async exportKey(password) {\n    let s = await this.get(password);\n    return s.hex;\n  }\n  count() {\n    return new Promise((resolve, reject) => {\n      this.db.count({}, (err, count) => {\n        resolve(count);\n      });\n    });\n  }\n  create(password) {\n    return new Promise((resolve, reject) => {\n      let s = this.wallet.seed();\n      this.db.insert(\n        {\n          hex: encrypt(s.hex, password),\n        },\n        (err, res) => {\n          resolve(s);\n        }\n      );\n    });\n  }\n}\nexport default Seed;\n","class State {\n  constructor(config) {\n    const dbpath = config.db;\n    this.db = new config.Datastore({\n      filename: dbpath + \"/state.db\",\n      autoload: true,\n    });\n  }\n  setState(s) {\n    this.state = s;\n  }\n  getState() {\n    return this.state;\n  }\n  async findOrCreate(o) {\n    let state = await this.findOne({ host: o.host });\n    // create a state if it doesn't exist\n    if (!state) {\n      state = await this.insert(o);\n    }\n    return state;\n  }\n  findOne(o) {\n    return new Promise((resolve, reject) => {\n      this.db.findOne(o, (err, state) => {\n        if (state) {\n          delete state._id;\n          resolve(state);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n  find(o) {\n    return new Promise((resolve, reject) => {\n      this.db.find(o, (err, states) => {\n        resolve(states);\n      });\n    });\n  }\n  delete(o) {\n    return new Promise((resolve, reject) => {\n      this.db.remove(o, (err, states) => {\n        resolve(states);\n      });\n    });\n  }\n  count(o) {\n    return new Promise((resolve, reject) => {\n      this.db.count(o, (err, count) => {\n        resolve(count);\n      });\n    });\n  }\n  insert(state) {\n    return new Promise((resolve, reject) => {\n      this.db.insert(state, (err, doc) => {\n        this.setState(state);\n        resolve(state);\n      });\n    });\n  }\n  update(state) {\n    return new Promise((resolve, reject) => {\n      this.db.update(\n        { host: state.host },\n        { $set: state },\n        {\n          upsert: true,\n          returnUpdatedDocs: true,\n        },\n        (err, numReplaced, doc) => {\n          console.log(\"UPDATED\", { err, accessToken: doc.accessToken });\n          this.setState(doc);\n          resolve(doc);\n        }\n      );\n    });\n  }\n  all() {\n    return new Promise((resolve, reject) => {\n      this.db.find({}, (err, states) => {\n        resolve(states);\n      });\n    });\n  }\n}\nexport default State;\n","\"use strict\";\n\nimport bitcore from \"bitcore-lib\";\nvar _ = bitcore.deps._;\nvar PrivateKey = bitcore.PrivateKey;\nvar PublicKey = bitcore.PublicKey;\nvar Address = bitcore.Address;\nvar BufferWriter = bitcore.encoding.BufferWriter;\nvar ECDSA = bitcore.crypto.ECDSA;\nvar Signature = bitcore.crypto.Signature;\nvar sha256sha256 = bitcore.crypto.Hash.sha256sha256;\nvar JSUtil = bitcore.util.js;\nvar $ = bitcore.util.preconditions;\n\n/**\n * constructs a new message to sign and verify.\n *\n * @param {String} message\n * @param {String=} encoding - The message encoding (either 'utf8', 'base64', or 'hex')\n * @returns {Message}\n */\nvar Message = function Message(message, encoding = \"utf8\") {\n  if (!(this instanceof Message)) {\n    return new Message(message, encoding);\n  }\n  $.checkArgument(\n    _.isString(message),\n    \"First argument should be a string. You can specify the encoding as the second parameter\"\n  );\n  const validEncodings = [\n    \"ascii\",\n    \"utf8\",\n    \"utf16le\",\n    \"ucs2\",\n    \"base64\",\n    \"latin1\",\n    \"binary\",\n    \"hex\",\n  ];\n\n  $.checkArgument(\n    validEncodings.includes(encoding),\n    \"Second argument should be a valid BufferEncoding: 'utf8', 'hex', or 'base64', etc\"\n  );\n\n  this.message = message;\n  this.encoding = encoding;\n\n  return this;\n};\n\nMessage.MAGIC_BYTES = Buffer.from(\"Bitcoin Signed Message:\\n\");\n\nMessage.prototype.magicHash = function magicHash() {\n  var prefix1 = BufferWriter.varintBufNum(Message.MAGIC_BYTES.length);\n  var messageBuffer = Buffer.from(this.message, this.encoding);\n  var prefix2 = BufferWriter.varintBufNum(messageBuffer.length);\n  var buf = Buffer.concat([\n    prefix1,\n    Message.MAGIC_BYTES,\n    prefix2,\n    messageBuffer,\n  ]);\n  var hash = sha256sha256(buf);\n  return hash;\n};\n\nMessage.prototype._sign = function _sign(privateKey) {\n  $.checkArgument(\n    privateKey instanceof PrivateKey,\n    \"First argument should be an instance of PrivateKey\"\n  );\n  var hash = this.magicHash();\n  var ecdsa = new ECDSA();\n  ecdsa.hashbuf = hash;\n  ecdsa.privkey = privateKey;\n  ecdsa.pubkey = privateKey.toPublicKey();\n  ecdsa.signRandomK();\n  ecdsa.calci();\n  return ecdsa.sig;\n};\n\n/**\n * Will sign a message with a given bitcoin private key.\n *\n * @param {PrivateKey} privateKey - An instance of PrivateKey\n * @returns {String} A base64 encoded compact signature\n */\nMessage.prototype.sign = function sign(privateKey) {\n  let wif = privateKey.toWIF();\n  privateKey = PrivateKey.fromWIF(wif);\n  var signature = this._sign(privateKey);\n  return signature.toCompact().toString(\"base64\");\n};\n\nMessage.prototype._verify = function _verify(publicKey, signature) {\n  $.checkArgument(\n    publicKey instanceof PublicKey,\n    \"First argument should be an instance of PublicKey\"\n  );\n  $.checkArgument(\n    signature instanceof Signature,\n    \"Second argument should be an instance of Signature\"\n  );\n  var hash = this.magicHash();\n  var verified = ECDSA.verify(hash, signature, publicKey);\n  if (!verified) {\n    this.error = \"The signature was invalid\";\n  }\n  return verified;\n};\n\n/**\n * Will return a boolean of the signature is valid for a given bitcoin address.\n * If it isn't the specific reason is accessible via the \"error\" member.\n *\n * @param {Address|String} bitcoinAddress - A bitcoin address\n * @param {String} signatureString - A base64 encoded compact signature\n * @returns {Boolean}\n */\nMessage.prototype.verify = function verify(bitcoinAddress, signatureString) {\n  $.checkArgument(bitcoinAddress);\n  $.checkArgument(signatureString && _.isString(signatureString));\n\n  if (_.isString(bitcoinAddress)) {\n    bitcoinAddress = Address.fromString(bitcoinAddress);\n  }\n  var signature = Signature.fromCompact(Buffer.from(signatureString, \"base64\"));\n\n  // recover the public key\n  var ecdsa = new ECDSA();\n  ecdsa.hashbuf = this.magicHash();\n  ecdsa.sig = signature;\n  var publicKey = ecdsa.toPublicKey();\n\n  var signatureAddress = Address.fromPublicKey(\n    publicKey,\n    bitcoinAddress.network\n  );\n\n  // check that the recovered address and specified address match\n  if (bitcoinAddress.toString() !== signatureAddress.toString()) {\n    this.error = \"The signature did not match the message digest\";\n    return false;\n  }\n\n  return this._verify(publicKey, signature);\n};\n\n/**\n * Instantiate a message from a message string\n *\n * @param {String} str - A string of the message\n * @returns {Message} A new instance of a Message\n */\nMessage.fromString = function (str) {\n  return new Message(str);\n};\n\n/**\n * Instantiate a message from JSON\n *\n * @param {String} json - An JSON string or Object with keys: message\n * @returns {Message} A new instance of a Message\n */\nMessage.fromJSON = function fromJSON(json) {\n  if (JSUtil.isValidJSON(json)) {\n    json = JSON.parse(json);\n  }\n  return new Message(json.message);\n};\n\n/**\n * @returns {Object} A plain object with the message information\n */\nMessage.prototype.toObject = function toObject() {\n  return {\n    message: this.message,\n    encoding: this.encoding,\n  };\n};\n\n/**\n * @returns {String} A JSON representation of the message information\n */\nMessage.prototype.toJSON = function toJSON() {\n  return JSON.stringify(this.toObject());\n};\n\n/**\n * Will return a the string representation of the message\n *\n * @returns {String} Message\n */\nMessage.prototype.toString = function () {\n  return this.message;\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {String} Message\n */\nMessage.prototype.inspect = function () {\n  return \"<Message: \" + this.toString() + \">\";\n};\n\nexport default Message;\n","import bitcore from \"bitcore-lib\";\nimport { encrypt as enc } from \"../crypt.js\";\nimport Message from \"./bitcore-message.js\";\ndelete global._bitcore;\n// console.log(identity.toJSON());\n\nexport const sign = (message, key, encoding) => {\n  const privateKey = bitcore.PrivateKey.fromWIF(key.priv);\n  const msg = Message(message, encoding);\n  return {\n    address: key.address,\n    message: message,\n    sig: msg.sign(privateKey),\n    ts: Date.now(),\n  };\n};\n\nexport const encrypt = (message, key) => {\n  const privateKey = bitcore.PrivateKey.fromWIF(key.priv).toBuffer();\n  const data = enc(message, null, privateKey);\n  return {\n    address: key.address,\n    data,\n    ts: Date.now(),\n  };\n};\n\nexport const create = async (seed, account, o) => {\n  /********************************************************************\n   * The derivation path follows the\n   * BIP44 standard with a twist:\n   *\n   * - A new account is created per web host\n   * - It uses a new branch of \"2\" instead of (0 or 1)\n   *\n   * This way there is no overlap with existing BIP44 walletse but\n   * the wallet scheme can seamlessly integrate with them.\n   *\n   ********************************************************************/\n  const StarfishBranch = 2;\n  const path = `m/44'/0'/${account}'/${StarfishBranch}/0`;\n  const derived = seed.key.deriveChild(path);\n  const address = derived.privateKey.toAddress().toString();\n  const keys = {\n    path,\n    pub: derived.publicKey.toString(),\n    address,\n    host: o.host,\n  };\n\n  return keys;\n};\n\nexport const seed = (hex) => {\n  let buf = hex\n    ? Buffer.from(hex, \"hex\")\n    : bitcore.crypto.Random.getRandomBuffer(64);\n  try {\n    let key = bitcore.HDPrivateKey.fromSeed(buf);\n    return {\n      hex: buf.toString(\"hex\"),\n      key: key,\n    };\n  } catch (e) {\n    console.log(\"error\", e);\n    throw e;\n  }\n};\n\nexport const derive = (seed, path) => {\n  return seed.key.deriveChild(path);\n};\n\nexport const verify = (message, address, sig, encoding) => {\n  return Message(message, encoding).verify(address, sig);\n};\n","import bodyParser from \"body-parser\";\nimport timeout from \"connect-timeout\";\nimport cors from \"cors\";\nimport { randomUUID } from \"crypto\";\nimport express from \"express\";\nimport fs from \"fs\";\nimport Datastore from \"nedb\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport Key from \"./key.js\";\nimport Seed from \"./seed.js\";\nimport State from \"./state.js\";\nimport * as Wallet from \"./wallet/index.js\";\n\nconst minidenticon = async (str) => {\n  const module = await import(\"minidenticons\");\n  return module.minidenticon(str);\n};\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\nconst TIMEOUT = 20;\nconst defaultPort = 21000;\nconst defaultExpireTime = \"once\";\n\nconst allowedOrigins = [\n  `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n    process.env.TOKENPASS_PORT || \"21000\"\n  }`,\n];\nconst whitelist = process.env.TOKENPASS_ORIGIN_WHITELIST;\nif (whitelist) {\n  allowedOrigins.push(...whitelist.split(\",\"));\n}\n\nconst hostFromOrigin = (headers) => {\n  return headers.origin ? new URL(headers.origin).host : null; // \"localhost\";\n};\n\nconst expireSelectionToTime = (expireSelection) => {\n  switch (expireSelection) {\n    case \"forever\":\n      return 0;\n    case \"once\":\n      return 10000;\n    case \"1h\":\n      return 3600000;\n    case \"1d\":\n      return 86400000;\n    case \"1w\":\n      return 604800000;\n    case \"1m\":\n      return 2592000000;\n    default:\n      return defaultExpireTime;\n  }\n};\n\nconst init = (config) => {\n  const dbpath = config.db;\n  if (!fs.existsSync(dbpath)) fs.mkdirSync(dbpath, { recursive: true });\n  const seed = new Seed({ db: dbpath, wallet: Wallet, Datastore: Datastore });\n  const K = new Key({ db: dbpath, wallet: Wallet, Datastore: Datastore });\n  const S = new State({ db: dbpath, Datastore: Datastore });\n  app.set(\"views\", path.join(__dirname, \"views\"));\n  app.set(\"view engine\", \"ejs\");\n  app.use(timeout(\"\" + TIMEOUT + \"s\"));\n  app.use(bodyParser.json({ limit: \"50mb\" }));\n  app.use(bodyParser.raw({ type: \"application/octet-stream\", limit: \"50mb\" }));\n  app.use(bodyParser.urlencoded({ limit: \"50mb\", extended: true }));\n  app.use(express.static(path.join(__dirname, \"public\")));\n  app.options(\"*\", cors());\n  app.use(express.urlencoded({ extended: false }));\n\n  // Sign a message\n  app.post(\"/sign\", cors(), async (req, res) => {\n    // when a tokenpass wallet connects the referrer is empty\n    consolg.log(\"SIGN ATTEMPTED FROM\", req.headers.origin, {\n      message: req.body.message,\n      authToken: req.headers.authorization,\n    });\n    let message = req.body.message;\n    let encoding = req.body.encoding || \"utf8\";\n\n    if (K.getSeed()) {\n      // Check for an access token\n      const accessToken = req.headers.authorization;\n      if ((accessToken === undefined) | (accessToken === null)) {\n        res.status(401).json({\n          error: \"Please provide an access token in the Authorization header.\",\n          code: 2,\n          success: false,\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n        });\n        return;\n      }\n\n      // Check that the access token is valid\n      const state = await S.findOne({ accessToken });\n\n      if (!state?.accessToken || state.accessToken !== accessToken) {\n        res.status(401).json({\n          error: \"Invalid access token.\",\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n          code: 3,\n          success: false,\n        });\n        return;\n      }\n\n      let host = accessToken ? state.host : hostFromOrigin(req.headers);\n      // use host associated with the access token if provided\n      if (!host) {\n        // no host means its youself on localhost\n        host = process.env.TOKENPASS_HOST || \"localhost\";\n        console.log(\"no origin, using\", host);\n      }\n\n      const expired = state.expireTime && state.expireTime < Date.now();\n\n      console.log(\"SIGN:\", {\n        expireTime: state.expireTime,\n        now: Date.now(),\n        host,\n      });\n\n      // Check that the access token is not expired\n      if (expired) {\n        res.status(401).json({\n          error: \"Access token has expired.\",\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n          code: 5,\n        });\n        return;\n      }\n\n      let key = await K.findOrCreate({ host: host });\n      if (key) {\n        let signedResponse = await K.sign({\n          message: message,\n          key: key,\n          encoding: encoding,\n          ts: Date.now(),\n        });\n\n        // Rotate the access token\n        // const newAccessToken = randomUUID();\n        // await S.update({\n        //   host,\n        //   accessToken: newAccessToken,\n        // });\n\n        // signedResponse.accessToken = newAccessToken;\n\n        res.status(200).json(signedResponse);\n        return;\n      } else {\n        res\n          .status(417)\n          .json({ error: \"please create a wallet.\", success: false });\n        return;\n      }\n    } else {\n      res.status(401).json({\n        errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n          process.env.TOKENPASS_PORT || \"21000\"\n        }/auth`,\n        error: \"Check that TokenPass is running and you're signed in.\",\n        code: 1,\n      });\n    }\n  });\n\n  app.post(\"/encrypt\", cors(), async (req, res) => {\n    let message = req.body.message;\n\n    if (K.getSeed()) {\n      // Check for an access token\n      const accessToken = req.headers.authorization;\n      if ((accessToken === undefined) | (accessToken === null)) {\n        res.status(401).json({\n          error: \"Please provide an access token in the Authorization header.\",\n          code: 2,\n          success: false,\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n        });\n        return;\n      }\n\n      const host = hostFromOrigin(req.headers);\n\n      // TODO:Check that the access token is valid\n      const state = await S.findOne({ accessToken });\n      if (!state) {\n        res.status(401).json({\n          error: \"Invalid access token.\",\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n          code: 3,\n          success: false,\n        });\n        return;\n      }\n\n      const key = await K.findOrCreate({ host: state.host });\n      if (!key) {\n        res.status(417).json({ error: \"please create a wallet.\" });\n        return;\n      }\n\n      const { address, data, sig, ts } = K.encrypt({ message, key });\n      console.log({ address, data, sig, ts });\n      res.status(200).json({ data, address, sig, ts });\n    } else {\n      res.status(401).json({\n        errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n          process.env.TOKENPASS_PORT || \"21000\"\n        }/auth`,\n        error: \"Check that TokenPass is running and you're signed in.\",\n        code: 1,\n      });\n    }\n  });\n\n  // First time seed creation\n  app.post(\"/register\", async (req, res) => {\n    let s = await seed.create(req.body.password);\n    K.setSeed(s);\n\n    // create first state for localhost with an icon\n    const state = await S.findOrCreate({\n      host: process.env.TOKENPASS_HOST || \"localhost\",\n    });\n    if (!state.icon) {\n      state.icon = \"/auth/icon\";\n      await S.update(state);\n    }\n\n    res.json({});\n  });\n\n  // Import seed\n  app.post(\"/import\", async (req, res) => {\n    try {\n      let s = await seed.importKey(req.body.hex, req.body.password);\n      K.setSeed(s);\n      res.json({});\n    } catch (e) {\n      res.json({ error: \"invalid seed\", success: false });\n    }\n  });\n\n  // Export seed\n  app.post(\"/export\", async (req, res) => {\n    try {\n      let hex = await seed.exportKey(req.body.password);\n      if (hex) {\n        res.json({ seed: hex });\n      } else {\n        res.status(401).json({\n          error: \"invalid\",\n          success: false,\n          errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n            process.env.TOKENPASS_PORT || \"21000\"\n          }/auth`,\n        });\n      }\n    } catch (e) {}\n  });\n\n  // Update state object\n  app.post(\"/state\", cors(), async (req, res) => {\n    let referer = req.headers.origin;\n    let host = new URL(referer).host;\n\n    const s = await S.findOne({ host });\n    if (s) {\n      if (req.query.mode === \"clear\") {\n        await S.delete({ host });\n        await S.update({ ...req.body, host });\n      } else {\n        S.update({ ...req.body, host });\n      }\n    } else {\n      S.insert({ ...req.body, host });\n    }\n\n    res.json({ success: true });\n  });\n\n  // Update profile object\n  app.post(\"/profile\", cors(), async (req, res) => {\n    if (K.getSeed()) {\n      let host = \"global\";\n      try {\n        const s = await S.findOne({ host });\n        let finalState = { ...req.body, host };\n        if (s) {\n          if (req.query.mode === \"clear\") {\n            await S.delete({ host });\n          }\n          S.update(finalState);\n        } else {\n          S.insert(finalState);\n        }\n        res.json({ success: true });\n      } catch (error) {\n        console.error(error);\n        res.status(500).json({ success: false, error: error.toString() });\n      }\n    } else {\n      res.status(401).json({\n        error:\n          \"please check that TokenPass is running and you're signed in. check TokenPass dashboard at http://localhost:21000\",\n        code: 1,\n        errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n          process.env.TOKENPASS_PORT || \"21000\"\n        }`,\n      });\n    }\n  });\n\n  // Update state object\n  app.delete(\"/state\", cors(), async (req, res) => {\n    let referer = req.headers.origin;\n    let host = new URL(referer).host;\n\n    S.delete({ ...req.body, host });\n\n    res.json({ success: true });\n  });\n\n  // Get the global profile\n  app.get(\"/profile\", cors(), async (req, res) => {\n    let state = await S.findOne({ host: \"global\" });\n    res.json(state);\n  });\n\n  // Get the state object\n  app.get(\"/state\", cors(), async (req, res) => {\n    let referer = req.headers.origin;\n    let host = new URL(referer).host;\n\n    let state = await S.findOne({ host });\n\n    res.json(state);\n  });\n\n  // Decrypt wallet with password at startup\n  app.post(\"/login\", async (req, res) => {\n    try {\n      let s = await seed.get(req.body.password);\n      if (s) {\n        K.setSeed(s);\n\n        // We do not give an access token here.\n        // Those are per hose, this is global\n        res.json({ success: true });\n      } else {\n        res.json({ error: \"invalid\", success: false });\n      }\n    } catch (e) {}\n  });\n\n  // Clear seed so the server stops signing requests\n  app.post(\"/logout\", cors(), (req, res) => {\n    K.setSeed(null);\n    res.json({ success: true });\n  });\n\n  // Ask a connected wallet to fund a raw tx\n  app.post(\"/fund\", cors(), async (req, res) => {\n    const key = K.getSeed();\n    if (key) {\n      const url = `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n        process.env.TOKENPASS_PORT || \"21000\"\n      }/fund`;\n      let referer = req.headers.origin;\n      let host = referer ? new URL(referer).host : \"localhost\";\n\n      // make sure we have permission to fund for this host\n      const state = await S.findOne({ host });\n      if (!state.scopes?.includes(\"fund\")) {\n        res.status(403).json({\n          error: \"Insufficient permission\",\n          code: 7,\n        });\n        return;\n      }\n\n      const authToken = state.accessToken;\n      let rawtx = req.body.rawtx;\n      try {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            rawtx,\n            broadcast: true,\n            sigma: true,\n            host,\n            authToken,\n          }),\n        });\n\n        const json = await response.json();\n        res.json(json);\n      } catch (e) {\n        console.error(e);\n        res.status(500).json({ success: false, error: e.toString() });\n      }\n    } else {\n      res.status(401).json({\n        error:\n          \"please check that TokenPass is running and you're signed in. check TokenPass dashboard at http://localhost:21000\",\n        code: 1,\n        errorURL: `http://${process.env.TOKENPASS_HOST || \"localhost\"}:${\n          process.env.TOKENPASS_PORT || \"21000\"\n        }/auth`,\n      });\n    }\n  });\n\n  // Decrypt wallet with password at startup\n  app.post(\"/login\", async (req, res) => {\n    try {\n      let s = await seed.get(req.body.password);\n      if (s) {\n        K.setSeed(s);\n        res.json({ success: true });\n      } else {\n        res.json({ error: \"invalid\", success: false });\n      }\n    } catch (e) {}\n  });\n\n  // alias to vivi.railway.internal\n  // Create an auth token for some amount of time\n  app.post(\"/auth\", cors(), async (req, res) => {\n    console.log(\"ATH ATTEMPTED FROM\", req.headers.origin);\n    const pw = req.body.password;\n    try {\n      let s = await seed.get(pw);\n      if (s) {\n        K.setSeed(s);\n\n        // ! Forbid auth from any not allowed origin\n        if (!allowedOrigins.includes(req.headers.origin)) {\n          res.status(403).json({\n            error: \"The origin is not authorized\",\n            code: 6,\n          });\n          return;\n        }\n\n        // Auth gets the host from the request body\n        const host = req.body.host;\n        console.log({ hosts: host, origin: req.headers.origin });\n\n        const expireSelection = req.body.expire;\n        const expireTime = expireSelectionToTime(expireSelection);\n\n        const accessToken = randomUUID();\n        const scopes = req.body.scopes?.split(\",\") || [];\n        const newState = {\n          host,\n          accessToken,\n          scopes,\n          icon: req.body.icon,\n          expireTime: Date.now() + expireTime,\n        };\n        await S.update(newState);\n        res.json({ success: true, accessToken, expireTime, host });\n      } else {\n        res.json({ error: \"invalid\", success: false });\n      }\n    } catch (e) {\n      res.status(500).json({ success: false, error: e.toString() });\n    }\n  });\n\n  // Ask wallet to prove ownership of a txid\n  app.get(\"/prove\", async (req, res) => {\n    let referer = req.headers.origin;\n    let host = new URL(referer).host;\n    let txid = req.query.txid;\n    let challengeStr = req.query.message;\n\n    // TODO: Find this txid in utxo store\n    let key = await Wallet.keyForTx(txid);\n    if (!key) {\n      res.status(404).json({\n        error: \"txid not found\",\n        code: 4,\n      });\n      return;\n    }\n    const { address, message, sig, ts } = Wallet.sign(challengeStr, key);\n    return res.json({ message, key, address, sig, ts });\n  });\n\n  // OAuth style login page for apps\n  app.get(\"/auth\", async (req, res) => {\n    const returnHost = new URL(req.query.returnURL).host;\n    const host =\n      hostFromOrigin(req.headers) || process.env.TOKENPASS_HOST || \"localhost\";\n\n    if (host !== returnHost) {\n      res.status(403).json({\n        error: \"The origin is not authorized \" + host + \" \" + returnHost,\n        code: 6,\n      });\n      return;\n    }\n\n    const returnURL = req.query.returnURL;\n    const icon = req.query.icon;\n    const scopes = req.query.scopes?.split(\",\") || [];\n\n    console.log(\"AUTH GET:\", {\n      returnURL,\n      icon,\n    });\n    res.render(\"auth\", {\n      returnURL,\n      icon,\n      scopes,\n      host: host || \"lostlhost\",\n    });\n  });\n\n  // Icon intended to be rendered in the auth page only\n  app.get(\"/auth/icon\", cors(), async (req, res) => {\n    // ! Forbid auth from any outside host\n    if (\n      req.headers.host !==\n      `${process.env.TOKENPASS_HOST || \"localhost\"}:${\n        process.env.TOKENPASS_PORT || \"21000\"\n      }`\n    ) {\n      res.status(403).json({\n        error: \"The origin is not authorized\" + req.headers.origin,\n        code: 6,\n      });\n      return;\n    }\n\n    res.set(\"Content-Type\", \"image/svg+xml\");\n    res.set(\"Cache-Control\", \"max-age=31536000\");\n\n    // derive a icon from localhost key\n    if (K.getSeed()) {\n      let k = await K.findOrCreate({\n        host: \"localhost\",\n      });\n\n      res.send(minidenticon(k.pub));\n    } else {\n      // default icon\n      res.send(minidenticon(\"Anon\"));\n    }\n  });\n\n  // Dashboard web page\n  app.get(\"/\", async (req, res) => {\n    if (K.getSeed()) {\n      // if host is specified\n      let keys = (await K.all()) || [];\n      let states = (await S.all()) || [];\n      res.render(\"home\", { keys, states, seed: true });\n    } else {\n      let seedCount = await seed.count();\n      if (seedCount) {\n        const host = hostFromOrigin(req.headers);\n        res.render(\"login\", { host });\n      } else {\n        res.render(\"home\", { seed: false });\n      }\n    }\n  });\n\n  app.listen(process.env.TOKENPASS_PORT || defaultPort, () => {\n    console.log(\n      `TokenPass listening at http://${\n        process.env.TOKENPASS_HOST || \"localhost\"\n      }:${process.env.TOKENPASS_PORT || \"21000\"}`\n    );\n  });\n};\nexport { init };\n"],"names":["Key","config","this","db","Datastore","filename","autoload","wallet","_proto","prototype","setSeed","s","seed","getSeed","sign","o","message","key","encoding","encrypt","findOrCreate","_this","Promise","resolve","findOne","then","_exit","_temp2","count","create","_this$wallet$create","insert","_this$insert","console","log","_temp","_result","e","reject","_this2","err","transform","find","_this3","keys","map","k","_this4","_this5","doc","derived","derive","path","priv","privateKey","toString","pub","publicKey","address","toAddress","all","_this6","text","keystr","keyBuffer","iv","crypto","randomBytes","createHash","update","digest","cipher","createCipheriv","encrypted","Buffer","concat","encryptedData","Seed","get","password","r","decrypted","from","encryptedText","decipher","createDecipheriv","decrypt","hex","importKey","res","exportKey","State","setState","state","getState","host","_id","states","remove","_this7","$set","upsert","returnUpdatedDocs","numReplaced","accessToken","_this8","_","bitcore","deps","PrivateKey","PublicKey","Address","BufferWriter","ECDSA","Signature","sha256sha256","Hash","JSUtil","util","js","$","preconditions","Message","checkArgument","isString","includes","MAGIC_BYTES","magicHash","prefix1","varintBufNum","length","messageBuffer","prefix2","buf","_sign","hash","ecdsa","hashbuf","privkey","pubkey","toPublicKey","signRandomK","calci","sig","wif","toWIF","fromWIF","toCompact","_verify","signature","verified","verify","error","bitcoinAddress","signatureString","fromString","fromCompact","signatureAddress","fromPublicKey","network","str","fromJSON","json","isValidJSON","JSON","parse","toObject","toJSON","stringify","inspect","global","_bitcore","msg","ts","Date","now","data","enc","toBuffer","account","deriveChild","Random","getRandomBuffer","HDPrivateKey","fromSeed","_catch","body","recover","result","minidenticon","_interopNamespace","require","module","__filename","fileURLToPath","document","href","currentScript","src","URL","baseURI","__dirname","dirname","app","express","allowedOrigins","process","env","TOKENPASS_HOST","TOKENPASS_PORT","whitelist","TOKENPASS_ORIGIN_WHITELIST","push","apply","split","hostFromOrigin","headers","origin","dbpath","fs","existsSync","mkdirSync","recursive","Wallet","K","S","set","join","use","timeout","bodyParser","limit","raw","type","urlencoded","extended","options","cors","post","req","consolg","authToken","authorization","undefined","status","code","success","errorURL","expired","expireTime","signedResponse","_K$encrypt","icon","_temp3","_temp4","_temp7","_temp6","_temp5","query","mode","_extends","_temp13","_temp12","_temp11","finalState","_temp10","_temp9","_temp8","_temp14","url","referer","_state$scopes","scopes","rawtx","_temp15","fetch","method","broadcast","sigma","response","_temp16","pw","_req$body$scopes","hosts","expireSelection","expireSelectionToTime","expire","randomUUID","newState","challengeStr","txid","_Wallet$sign","_req$query$scopes","returnHost","returnURL","render","_temp17","send","_temp18","seedCount","listen"],"mappings":"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"}