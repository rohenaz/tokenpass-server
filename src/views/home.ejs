<html>
  <head>
    <link
      href="/daisy.4.4.2.full.min.css"
      rel="stylesheet"
      type="text/css"
    />
    <script src="/htmx.min.js"></script>
    <script src="/remove-me.js"></script>

    <script src="/tailwind_3.3.5.js"></script>

    <script src="/moment.min.js"></script>
    <link rel="stylesheet" href="/style.css" />
    <!-- <link href="/swal.css" rel="stylesheet" /> -->
    <link
      rel="stylesheet"
      href="/swal.css"
    />
    <script src="/swal.min.js"></script>

    <script>
      htmx.on("htmx:afterRequest", function (evt) {
        // console.log("The element that dispatched the request: ", evt.detail.elt);
        // console.log("The XMLHttpRequest: ", evt.detail.xhr);
        // console.log("The target of the request: ", evt.detail.target);
        // console.log("The configuration of the AJAX request: ", evt.detail.requestConfig);
        // console.log("The event that triggered the request: ", evt.detail.requestConfig.triggeringEvent);
        // console.log("True if the response has a 20x status code or is marked detail.isError = false in the htmx:beforeSwap event, else false: ", evt.detail.successful);
        // console.log("true if the response does not have a 20x status code or is marked detail.isError = true in the htmx:beforeSwap event, else false: ", evt.detail.failed);

        if (
          evt.detail.target.id === "save-profile-status" &&
          !evt.detail.failed
        ) {
          document.getElementById("editProfileModal").close();
        }
      });

      htmx.defineExtension("filter-response", {
        onEvent: function (name, evt) {
          // console.log("Fired event: " + name, evt);
        },
        handleSwap: function (swapStyle, target, fragment, settleInfo) {
          console.log("Swapping: " + swapStyle, target, fragment, settleInfo);
          return false;
        },
        transformResponse: function (text, xhr, request) {
          // get the hx-filter attribute from the request element
          const filter = request.getAttribute("hx-filter");

          console.log("Transforming response: ", text, filter, request);
          if (filter) {
            // check if the filter contains a space
            if (filter.indexOf(":") > -1 && filter.indexOf("?") > -1) {
              // if it does, split it into an array at the punctuation
              const filters = filter.split(/[:?]/);

              // and return the value of the property named by the first item in the array
              const parsed = JSON.parse(text);
              const filterValue = parsed[filters[0].trim()];
              console.log({
                filters,
                filterValue,
                parsed,
                filters0: filters[0],
              });
              return filterValue === "true" || filterValue === true
                ? filters[1]
                : filters[2];
            } else {
              throw new Error(
                "Invalid filter. If more than a single key name is provided expecxting a turnary statement. ex: 'valid ? success : error'"
              );
              return;
            }

            // simple filter, parse the response as JSON
            try {
              const json = JSON.parse(text);
            } catch (e) {
              throw new Error("Invalid JSON response");
              return;
            }
            // and return the value of the property named by the hx-filter attribute
            return json[filter];
          }
          return text;
        },
      });
    </script>

    <script>
      const swal = Swal.mixin({
        buttonsStyling: false,
        customClass: { confirmButton: "w-full rounded-sm" },
      });
      const modal = async () => {
        debugger;
        let { value: formValues } = await Swal.fire({
          title: "Create a profile",
          html: `<div>Enter a password to encrypt your data, and some basic profile info.</div><br>
          <label class="label" for="displayName">Display Name</label>
          <input name="displayName" type='text' placeholder='Satoshi Nakamoto' id='profile-displayName' class='input input-bordered w-full mb-2' /><br>
          <label class="label" for="avatar">Avatar</label>
          <input name="avatar" type='file' id='profile-avatar' class='file file-bordered w-full mb-2' /><br>
          <label class="label" for="paymail">Paymail</label>
          <input name="paymail" type='text' placeholder='your@paymailaddress.com' id='profile-paymail' class='input input-bordered w-full mb-2' /><br>
          <div class="divider"></div>
          <label class="label" for="password"> Choose a password</label>
          <input name="password" type='password' placeholder='enter a password' id='profile-password' class='input input-bordered w-full mb-2' />
          <input name="confirm" type='password' placeholder='confirm password' id='profile-confirm' class='input input-bordered w-full' /><br>

          <div class="divider">OR</div>
          <button class="btn" onclick="importSeedModal.showModal()">import seed</button>

          `,
          allowOutsideClick: false,
          preConfirm: () => {
            return [
              document.querySelector("#profile-password").value,
              document.querySelector("#profile-confirm").value,
              document.querySelector("#profile-displayName").value,
              document.querySelector("#profile-paymail").value,
              document.querySelector("#profile-avatar").value,
            ];
          },
          focusConfirm: true,
          didOpen: () => {
            // document.querySelector("#password").focus();
//             document.querySelector("#import").addEventListener("click", async (e) => {
//               // close the open model first
//               Swal.close()
// debugger;
//               await importKey();
//             });
          },
        });
        debugger
        if (formValues && formValues[0] === formValues[1]) {
          fetch("/register", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              password: formValues[0],
              displayName: formValues[2],
              paymail: formValues[3],
              avatar: formValues[4],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.success) {
                location.href = location.href;
              }
            });
        } else {
          alert("Passwords must match.");
          modal();
        }
      };
      const importKey = async () => {
        let { value: formValues } = await swal.fire({
          title: "Import Wallet Seed",
          html: "<div>Please enter the wallet seed hex and a password to encrypt it.</div><br><textarea id='seed'></textarea><br><input type='password' placeholder='select password' id='password'>",
          preConfirm: () => {
            return [
              document.querySelector("#seed").value,
              document.querySelector("#password").value,
            ];
          },
          focusConfirm: true,
          didOpen: () => {
            console.log("import opened")
            document.querySelector("#seed").focus();
          },
        });
        if (
          formValues &&
          formValues[0] &&
          formValues[1] &&
          formValues[0].length > 0 &&
          formValues[1].length > 0
        ) {
          fetch("/import", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              hex: formValues[0],
              password: formValues[1],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.error) {
                alert("Invalid seed");
                importKey();
              } else {
                location.href = location.href;
              }
            });
        } else {
          alert("Enter wallet seed and encryption password");
          importKey();
        }
      };
      const exportKey = async () => {
        let { value: formValues } = await swal.fire({
          title: "Export Wallet Seed",
          html: "<div class='text-secondary'>Please enter the decryption password.</div><br><input class='input w-full max-w-xs' type='password' placeholder='enter your password' id='password'>",
          preConfirm: () => {
            return [document.querySelector("#password").value];
          },
          focusConfirm: false,
          didOpen: () => {
            const passwordInput = document.querySelector("#password");
            passwordInput.focus();

            // Add an event listener for the Enter key
            passwordInput.addEventListener("keydown", (e) => {
              if (e.key === "Enter") {
                // Trigger the confirm button click
                Swal.clickConfirm();
              }
            });
          },
        });
        if (formValues && formValues[0]) {
          fetch("/export", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              password: formValues[0],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.error) {
                alert("Invalid password");
                exportKey();
              } else {
                if (data.mnemonic) {
                  Swal.fire({
                    title: "Seed Phrase",
                    html: `<pre class='text-sm mb-2 text-left p-2'>
The derivation path follows the
BIP44 standard with a twist:

- A new account is created per web host
- It uses a new branch of "2" instead of (0 or 1)

So no overlap with existing BIP44 wallets but the
wallet scheme can seamlessly integrate with them.
</pre>
                      <textarea class='textarea textarea-bordered text-lg font-mono w-full'>${data.mnemonic}</textarea>`,
                    confirmButtonText: "Copy",
                    didOpen: () => {
                      document
                        .querySelector(".swal2-confirm")
                        .addEventListener("click", (e) => {
                          navigator.clipboard.writeText(data.mnemonic);
                          swal.fire({
                            title: "Copied!",
                            text: "Seed phrase copied to clipboard",
                            icon: "success",
                            timer: 3000,
                            timerProgressBar: true,
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                          });
                        });
                    },
                  });
                }
              }
            });
        } else {
          alert("Enter password");
          exportKey();
        }
      };
      document.addEventListener("DOMContentLoaded", (e) => {
        const timeElements = document.getElementsByClassName("expireTime");
        for (let i = 0; i < timeElements.length; i++) {
          const time = parseInt(timeElements[i].getAttribute("data-time"));
          timeElements[i].innerHTML = moment(time).fromNow();
        }

        document.querySelector("#export").addEventListener("click", (e) => {
          exportKey();
        });

        document.querySelector("#logout").addEventListener("click", (e) => {
          fetch("/logout", {
            method: "post",
          })
            .then((res) => {
              return res.json();
            })
            .then((res) => {
              if (res.success) {
                location.href = location.href;
              }
            });
        });
        if (document.body.dataset.seed === "false") {
          modal();
        }
      });
    </script>
  </head>

  <body class="mx-auto" data-seed="<%= locals.seed %>">
    <nav class="flex flex-col w-full mx-auto items-start">
      <div class="flex items-center justify-between w-full">
        <img class="mr-2 w-7" src="http://localhost:21000/auth/icon" />
        <h1 class="text-lg">TokenPass</h1>

        <div class="flexible"></div>
        <div
          class="menu-item btn mr-2"
          id="edit-profile"
          onclick="editProfileModal.showModal()"
        >
          edit profile
        </div>

        <div class="menu-item btn mr-2" id="export">export</div>
        <div class="menu-item btn" id="logout">logout</div>
      </div>
      <div class="text-left">
        <h2 class="text-secondary text-xs font-mono tracking-wide">
          Wallet Connected
        </h2>
      </div>
    </nav>

    <!-- Open the modal using ID.showModal() method -->
    <dialog id="editProfileModal" class="modal">
      <div class="modal-box">
        <h3 class="font-bold text-lg">Edit Global Profile</h3>
        <p class="py-4">This is you public profile.</p>
        <form>
          <% if (locals.states) { %> <% states.forEach((state) => { %> <% if
          (state["host"] === 'global') { %> <% for (let stateKey in state) { %>
          <% if (stateKey !== 'host' && stateKey !== '_id') { %>
          <div class="form-control">
            <label class="label" for="profile-<%= stateKey %>">
              <%= stateKey %>
            </label>
            <input class="input input-bordered" type="text" <% if (stateKey ===
            'bapID') { %> disabled <% } %> name="<%= stateKey %>" value="<%=
            state[stateKey] %>" />
          </div>
          <br />
          <% } %> <% } %> <% } %> <% }) %> <% } %>

          <div id="save-profile-status" hx-ext="remove-me" class="flex mb-2">
            <div>&nbsp;</div>
          </div>

          <button
            type="submit"
            class="btn btn-primary bg-primary text-primary-content"
            hx-post="/profile"
            hx-target="#save-profile-status"
            hx-ext="filter-response"
            hx-filter="success ? <div remove-me='3s'>success</div> : error"
            hx-swap="afterbegin transition:true"
          >
            Save
          </button>
        </form>
      </div>
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>

    <div class="container mx-auto">
      <% if (locals.keys) { %> <% locals.keys.forEach((key) => { %>
      <div class="flex flex-col">
        <div
          class="item flex items-center gap-x-2"
          data-path="<%=key.path%>"
          data-address="<%=key.address%>"
        >
          <div>
            <img src="<%= states[0]['icon'] %>" alt="" class="w-8 h-8" />
          </div>
          <div>
            <h2><%=key.host%></h2>
            <div class="font-mono text-xs"><%=key.address%></div>
          </div>
        </div>

        <div>
          <% if (locals.states) { %> <% states.forEach((state) => { %> <% if
          (state.host === key.host) { %> <% for (let stateKey in state) { %> <%
          if (stateKey !== 'host' && stateKey !== '_id' && stateKey !== 'icon'
          && stateKey !== 'expireTime') { %>
          <div class="state-item text-left ml-12">
            <div>
              <% if((stateKey === 'accessToken')) { %>
              <strong><%= stateKey %>:</strong> <%= state[stateKey] %>
              <div class="text-gray-800 text-xs">
                expires in
                <span class="expireTime" data-time="<%= state['expireTime'] %>">
                  <%= state['expireTime'] %>
                </span>
              </div>
              <% } else { %>
              <strong><%= stateKey %>:</strong>
              <%= state[stateKey] %> <% } %>
            </div>
          </div>
          <% } %> <% } %> <% } %> <% }) %> <% } %>
        </div>
      </div>
      <% }) %> <% } %> <% if (locals.keys && locals.keys.length === 0) { %>
      <div class="flex items-center justify-center h-64">
        <div class="text-center">
          <h2 class="text-2xl">No Keys</h2>
          <div class="text-sm">
            <p>You have no keys. Create a key to use TokenPass.</p>
          </div>
        </div>
      </div>
      <% } %>
    </div>
    <dialog id="importSeedModal" class="modal">
      <div class="modal-box">
        <h3 class="font-bold text-lg mb-2">Import Seed</h3>
        <form>
          <textarea id="import-mnemonic" class="textarea textarea-bordered py-4 w-full mb-2 font-mono">Enter your seed phrase</textarea>
          <label class="label" for="password">Choose a password to encrypt your data</label>
          <input type='password' placeholder='select password' id='import-password' class="input input-bordered w-full">
          <div class="modal-action">
            <button class="btn" hx-post="/import">Import</button>
          </div>
        </form>
      </div>
    </dialog>
  </body>
</html>
