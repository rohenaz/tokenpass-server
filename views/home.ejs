<html>
  <head>
    <script src="/cdn.tailwindcss.com_3.3.3.js"></script>
    <script src="/moment.min.js"></script>
    <link rel="stylesheet" href="/style.css" />
    <link href="/swal.css" rel="stylesheet" />
    <script src="/swal.min.js"></script>
    <script>
      const swal = Swal.mixin({
        buttonsStyling: false,
        customClass: { confirmButton: "w-full rounded-sm" },
      });
      const modal = async () => {
        debugger;
        let { value: formValues } = await Swal.fire({
          title: "Create a wallet",
          html: "<div>Enter a password to encrypt your wallet.</div><br><input type='password' placeholder='select password' id='password' class='mb-2'><br><input type='password' placeholder='confirm password' id='confirm'><br>or <a id='import'>import seed</a>",
          preConfirm: () => {
            return [
              document.querySelector("#password").value,
              document.querySelector("#confirm").value,
            ];
          },
          focusConfirm: true,
          didOpen: () => {
            document.querySelector("#password").focus();
            document.querySelector("#import").addEventListener("click", (e) => {
              importKey();
            });
          },
        });
        if (formValues && formValues[0] === formValues[1]) {
          fetch("/register", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              password: formValues[0],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.success) {
                location.href = location.href;
              }
            });
        } else {
          alert("Passwords must match.");
          modal();
        }
      };
      const importKey = async () => {
        let { value: formValues } = await swal.fire({
          title: "Import Wallet Seed",
          html: "<div>Please enter the wallet seed hex and a password to encrypt it.</div><br><textarea id='seed'></textarea><br><input type='password' placeholder='select password' id='password'>",
          preConfirm: () => {
            return [
              document.querySelector("#seed").value,
              document.querySelector("#password").value,
            ];
          },
          focusConfirm: true,
          didOpen: () => {
            document.querySelector("#seed").focus();
          },
        });
        if (
          formValues &&
          formValues[0] &&
          formValues[1] &&
          formValues[0].length > 0 &&
          formValues[1].length > 0
        ) {
          fetch("/import", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              hex: formValues[0],
              password: formValues[1],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.error) {
                alert("Invalid seed");
                importKey();
              } else {
                location.href = location.href;
              }
            });
        } else {
          alert("Enter wallet seed and encryption password");
          importKey();
        }
      };
      const exportKey = async () => {
        let { value: formValues } = await swal.fire({
          title: "Export Wallet Seed",
          html: "<div>Please enter the decryption password.</div><br><input type='password' placeholder='select password' id='password'>",
          preConfirm: () => {
            return [document.querySelector("#password").value];
          },
          focusConfirm: true,
          didOpen: () => {
            document.querySelector("#password").focus();
          },
        });
        if (formValues && formValues[0]) {
          fetch("/export", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              password: formValues[0],
            }),
          })
            .then((res) => {
              return res.json();
            })
            .then((data) => {
              if (data.error) {
                alert("Invalid password");
                exportKey();
              } else {
                if (data.seed) {
                  Swal.fire({
                    title: "Seed Hex",
                    html:
                      "<textarea style='height: 200px;'>" +
                      data.seed +
                      "</textarea>",
                  });
                }
              }
            });
        } else {
          alert("Enter password");
          exportKey();
        }
      };
      document.addEventListener("DOMContentLoaded", (e) => {
        const timeElements = document.getElementsByClassName("expireTime");
        for (let i = 0; i < timeElements.length; i++) {
          const time = parseInt(timeElements[i].getAttribute("data-time"));
          timeElements[i].innerHTML = moment(time).fromNow();
        }

        document.querySelector("#export").addEventListener("click", (e) => {
          exportKey();
        });
        document.querySelector("#logout").addEventListener("click", (e) => {
          fetch("/logout", {
            method: "post",
          })
            .then((res) => {
              return res.json();
            })
            .then((res) => {
              if (res.success) {
                location.href = location.href;
              }
            });
        });
        if (document.body.dataset.seed === "false") {
          modal();
        }
      });
    </script>
  </head>

  <body class="mx-auto" data-seed="<%= locals.seed %>">
    <nav class="flex flex-col w-full mx-auto items-start">
      <div class="flex items-center justify-between w-full">
        <img class="mr-2 w-7" src="http://localhost:21000/auth/icon" />
        <h1 class="text-lg">TokenPass</h1>

        <div class="flexible"></div>
        <div class="menu-item" id="export">export</div>
        <div class="menu-item" id="logout">logout</div>
      </div>
      <div class="text-left"><h2 class="text-xs">Wallet Connected</h2></div>
    </nav>

    <div class="container mx-auto">
      <% if (locals.keys) { %> <%keys.forEach((key) => { %>
      <div class="flex flex-col">
        <div
          class="item flex items-center gap-x-2"
          data-path="<%=key.path%>"
          data-address="<%=key.address%>"
        >
          <div>
            <img src="<%= states[0]['icon'] %>" alt="" class="w-8 h-8" />
          </div>
          <div>
            <h2><%=key.host%></h2>
            <div class="font-mono text-xs"><%=key.address%></div>
          </div>
        </div>

        <div>
          <% if (locals.states) { %> <% states.forEach((state) => { %> <% if
          (state.host === key.host) { %> <% for (let stateKey in state) { %> <%
          if (stateKey !== 'host' && stateKey !== '_id' && stateKey !== 'icon'
          && stateKey !== 'expireTime') { %>
          <div class="state-item text-left ml-12">
            <div>
              <% if((stateKey === 'accessToken')) { %>
              <strong><%= stateKey %>:</strong> <%= state[stateKey] %>
              <div class="text-gray-800 text-xs">
                Access Token Expires in
                <span class="expireTime" data-time="<%= state['expireTime'] %>">
                  <%= state['expireTime'] %>
                </span>
              </div>
              <% } else { %>
              <strong><%= stateKey %>:</strong>
              <%= state[stateKey] %> <% } %>
            </div>
          </div>
          <% } %> <% } %> <% } %> <% }) %> <% } %>
        </div>
      </div>
      <% }) %> <% } %> <% if (locals.keys.length === 0) { %>
      <div class="flex items-center justify-center h-64">
        <div class="text-center">
          <h2 class="text-2xl">No Keys</h2>
          <div class="text-sm">
            <p>You have no keys. Create a key to use TokenPass.</p>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </body>
</html>
